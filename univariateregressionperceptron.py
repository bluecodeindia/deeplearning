# -*- coding: utf-8 -*-
"""UnivariateRegressionPerceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nRqUNTy8dkZog-HLAIDq7ckls7sRopf-
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
# %matplotlib inline

plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (10, 10)

from google.colab import drive
drive.mount('/content/drive')

File="/content/drive/My Drive/Deeplearning/Group31_Assignment1/"

def readData(file):
    data=pd.read_csv(file+".csv",",",header=None)
    data=np.array(data.values)
    return data

def train_test_split(arr, test):
    y=np.full(len(arr),1)
    
    train=     np.array([y[:-int(len(arr)*(test))],arr[:-int(len(arr)*(test)),0],arr[:-int(len(arr)*(test)),1]])
   
    test=      np.array([y[-int(len(arr)*test): ],arr[-int(len(arr)*test): ,0],arr[-int(len(arr)*test): ,1]])
    
    return train.T, test.T



Folder=[File+"Group31/Regression/UnivariateData/31"]

for k in Folder:
        
    folder=k
    data =  readData(k)
    
    train_data, Test=  train_test_split(data,0.20)

# Decision boundary
def generate_values_boundary(data,weights1,ttl):
    min_x=min(data[:,1])
    max_x=max(data[:,1])

    W=weights1[1]
    b= weights1[0]
   
    x_mesh = np.linspace(min_x, max_x, 500)
    y_pred   = W*data[:,0]+b
    plt.plot(data[:,0],y_pred,color='b',label='p1')
                    
    plt.scatter(data[:,0],data[:,1],marker='D',color='#EAA358',edgecolors='black')
    print(ttl)
    plt.xlabel("x1")  # add X-axis label 
    plt.ylabel("x2") 
    plt.savefig(ttl+'.png',bbox_inches = 'tight')
    plt.show()

plt.scatter(data[:,0],data[:,1],marker='D',color='#EAA358',edgecolors='black')
plt.xlabel("x1")  # add X-axis label 
plt.ylabel("x2") 
plt.savefig('data.png',bbox_inches = 'tight')

def perceptron(weights,input,log):
    
    predict=np.dot(weights,input)

                
    return predict

def network(inputs,epoch,log):
    

    w1=0.2
    bias=0.1
    cls1=0
    l_rate=0.1
    epoch_error=list()
    error1=0
    error2=0
    error=0
    error_vector1=[0,0,0]
    weights=np.array([bias,w1])
    np.random.shuffle(inputs)
    for j in range(epoch):
        
        error1=0
        error2=0
        error=0

        error_vector1[2]=0
        for i in range(len(inputs)):

            expected=inputs[i][2]
            
            
            predict=perceptron(weights,inputs[i][0:2],log)
            
            error1=error1+(predict-expected)*inputs[i][1]
            error2=error2+(predict-expected)
            error=error+(predict-expected)*(predict-expected)
            
        error1=error1/len(inputs)
        error2=error2/len(inputs)
        weights=[weights[0]-l_rate*(2*error2),weights[1]-l_rate*(2*error1)]
        epoch_error.append(error/len(inputs))
        
    return weights,epoch_error

def test(inputs,weights):
    

    error=0
    np.random.shuffle(inputs)
        
     

    for i in range(len(inputs)):

        expected=inputs[i][2]


        predict=perceptron(weights,inputs[i][0:2],0)


        error=error+(predict-expected)*(predict-expected)

        
    return error/len(inputs)

def cross_validation(k,Arr):



    length1=int(len(Arr)*0.25)

    
    M1,M2,M3,M4=Arr[:length1].copy(),Arr[length1:2*length1],Arr[2*length1:3*length1],Arr[3*length1:4*length1]
   
    if k==1:
        M=np.concatenate((M2,M3,M4))
        V=M1
    if k==2:
        M=np.concatenate((M1,M3,M4))
        V=M2
    if k==3:
        M=np.concatenate((M1,M2,M4))
        V=M3
    if k==4:
        M=np.concatenate((M1,M2,M3))
        V=M4


    
    
    return M, V

k=3 # k=1, 2, 3, 4 for the cross validation, where 1 is Fold-1
plt.rcParams['figure.figsize'] = (10, 10)

Train,Validation=cross_validation(k,train_data)

weights,error=network(Train,epoch=1000,log=1)

generate_values_boundary(data,weights,'Regression')



plt.plot(error)
plt.xlabel("Epochs")  # add X-axis label 
plt.ylabel("Error")  # add Y-axis label 
plt.title("Error Plot")  # add title 
plt.savefig('LS_Error.png',bbox_inches = 'tight')

A1=test(Train,weights)

A2=test(Validation,weights)

A3=test(Test,weights)

print('Training Error: ',A1)
print('Validation Error: ',A2)
print('Test Error: ',A3)

